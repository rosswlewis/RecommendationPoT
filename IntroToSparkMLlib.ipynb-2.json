{"nbformat_minor": 0, "cells": [{"source": "# Lab 3 - Online Purchase Recommendations\n\nLearn how to create a recommendation engine using the Alternating Least Squares algorithm in Spark's machine learning library", "cell_type": "markdown", "metadata": {}}, {"source": "###The data\n\nThis is a transnational data set which contains all the transactions occurring between 01/12/2010 and 09/12/2011 for a UK-based and registered non-store online retail.  The company mainly sells unique all-occasion gifts. Many customers of the company are wholesalers.\n\nhttp://archive.ics.uci.edu/ml/datasets/Online+Retail\n\n<img src='https://raw.githubusercontent.com/rosswlewis/RecommendationPoT/master/FullFile.png' width=\"80%\" height=\"80%\"></img>", "cell_type": "markdown", "metadata": {}}, {"source": "##Create an RDD from the csv data ", "cell_type": "markdown", "metadata": {}}, {"execution_count": 59, "cell_type": "code", "source": "#Put the csv into an RDD (at first, each row in the RDD is a string which\n#correlates to a line in the csv\nretailData = sc.textFile(\"/resources/OnlineRetail.csv\")\nprint retailData.take(2)", "outputs": [{"output_type": "stream", "name": "stdout", "text": "[u'InvoiceNo,StockCode,Description,Quantity,InvoiceDate,UnitPrice,CustomerID,Country', u'536365,85123A,WHITE HANGING HEART T-LIGHT HOLDER,6,12/1/10 8:26,2.55,17850,United Kingdom']\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "##Prepare and shape the data", "cell_type": "markdown", "metadata": {}}, {"execution_count": 60, "cell_type": "code", "source": "from pyspark.mllib.recommendation import ALS, Rating\nimport re\n\n#Remove the header from the RDD\nheader = retailData.first()\nretailData = retailData.filter(lambda line: line != header)\n\n#To produce the ALS model, we need to train it with each individual\n#purchase.  Each record in the RDD must be the customer id, \n#item id, and the rating.  In this case, the rating is the quantity\n#ordered.  MLlib converts these into a sparce, unfactored matrix.\nretailData = retailData.map(lambda l: l.split(\",\")).\\\n    filter(lambda l: int(l[3]) > 0 and len(re.sub(\"\\D\", \"\", l[1])) != 0 and len(l[6]) != 0).\\\n    map(lambda l: (int(l[6]),int(re.sub(\"\\D\", \"\", l[1])),int(l[3])))\n\n#Randomly split the data into a testing set and a training set\ntestRDD, trainRDD = retailData.randomSplit([.2,.8])\n\ntrainData = trainRDD.map(lambda l:  Rating(l[0],l[1],l[2]))\n\nprint trainData.take(2)\nprint\nprint testRDD.take(2)", "outputs": [{"output_type": "stream", "name": "stdout", "text": "[Rating(user=17850, product=85123, rating=6.0), Rating(user=17850, product=71053, rating=6.0)]\n\n[(17850, 84029, 6), (13047, 22622, 2)]\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "##Build the recommendation model", "cell_type": "markdown", "metadata": {}}, {"execution_count": 61, "cell_type": "code", "source": "#Use trainging RDD to train a model with Alternating Least Squares \n#rank=5\n#5 columns in the user-feature and product-feature matricies\n#iterations=10\n#10 factorization runs\nrank = 5\nnumIterations = 10\nmodel = ALS.train(trainData, rank, numIterations)\n\nprint \"The model has been trained\"", "outputs": [{"output_type": "stream", "name": "stdout", "text": "The model has been trained\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "##Test the model", "cell_type": "markdown", "metadata": {}}, {"execution_count": 62, "cell_type": "code", "source": "#Evaluate the model with the test rdd by using the predictAll function\npredict = model.predictAll(testRDD.map(lambda l: (l[0],l[1])))\n\n#Calculate and print the Mean Squared Error\npredictions = predict.map(lambda l: ((l[0],l[1]), l[2]))\nratingsAndPredictions = testRDD.map(lambda l: ((l[0], l[1]), l[2])).join(predictions)\n\nratingsAndPredictions.cache()\nprint ratingsAndPredictions.take(3)\n\nmeanSquaredError = ratingsAndPredictions.map(lambda l: (l[1][0] - l[1][1])**2).mean()\nprint\nprint 'Mean squared error = %.4f' % meanSquaredError", "outputs": [{"output_type": "stream", "name": "stdout", "text": "[((17419, 22193), (2, 2.424530277511151)), ((14854, 21382), (6, 19.043962745226178)), ((14529, 22209), (2, 0.7686558402535724))]\n\nMean squared error = 2746.7734\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "#####This doesn't give us that good of a representation of ranking becuase the ranks are number of purchases.  Something better may be to look at some actual recommendations.", "cell_type": "markdown", "metadata": {}}, {"execution_count": 63, "cell_type": "code", "source": "recs = model.recommendProducts(15544,5)\nfor rec in recs:\n    print rec", "outputs": [{"output_type": "stream", "name": "stdout", "text": "Rating(user=15544, product=84568, rating=193.03195106065823)\nRating(user=15544, product=16033, rating=179.45915040198466)\nRating(user=15544, product=22266, rating=161.04293255928698)\nRating(user=15544, product=84598, rating=141.00162368678377)\nRating(user=15544, product=72803, rating=129.54033486738518)\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "<img src='https://raw.githubusercontent.com/rosswlewis/RecommendationPoT/master/FullFile.png' width=\"80%\" height=\"80%\"></img>", "cell_type": "markdown", "metadata": {}}, {"source": "#####This user seems to have purchased a lot of childrens gifts and some holiday items.  The recomendation engine we created suggested some aitems along these lines", "cell_type": "markdown", "metadata": {}}, {"execution_count": 64, "cell_type": "code", "source": "#Rating(user=15544, product=84568, rating=193.03195106065823)\n#GIRLS ALPHABET IRON ON PATCHES \n\n#Rating(user=15544, product=16033, rating=179.45915040198466)\n#MINI HIGHLIGHTER PENS\n\n#Rating(user=15544, product=22266, rating=161.04293255928698)\n#EASTER DECORATION HANGING BUNNY\n\n#Rating(user=15544, product=84598, rating=141.00162368678377)\n#BOYS ALPHABET IRON ON PATCHES\n\n#Rating(user=15544, product=72803, rating=129.54033486738518)\n#ROSE SCENT CANDLE JEWELLED DRAWER", "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "#####Data Citation\nDaqing Chen, Sai Liang Sain, and Kun Guo, Data mining for the online retail industry: A case study of RFM model-based customer segmentation using data mining, Journal of Database Marketing and Customer Strategy Management, Vol. 19, No. 3, pp. 197\u00e2\u20ac\u201c208, 2012 (Published online before print: 27 August 2012. doi: 10.1057/dbm.2012.17).", "cell_type": "markdown", "metadata": {}}], "nbformat": 4, "metadata": {"kernelspec": {"display_name": "Python 2", "name": "python2", "language": "python"}, "language_info": {"mimetype": "text/x-python", "nbconvert_exporter": "python", "version": "2.7.11", "name": "python", "file_extension": ".py", "pygments_lexer": "ipython2", "codemirror_mode": {"version": 2, "name": "ipython"}}}}